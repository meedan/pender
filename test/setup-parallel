#!/bin/bash
source_from_ssm() {
    env | grep AWS | wc -l
    all_ssm_params=$(aws ssm get-parameters-by-path --path /${DEPLOY_ENV}/${APP}/ | jq -rcM .Parameters[])
    IFS=$'\n'
    for ssm_param in $all_ssm_params; do
        param_name=$(echo $ssm_param | jq -r .Name)
        echo "Retrieving value for $param_name"
        param_value=$(aws ssm get-parameter --with-decryption --name "$param_name"| jq -r .Parameter.Value)
        export "${param_name##*/}"="${param_value}"
    unset IFS
    done
}

set_config() {
    cd config/ && find -name '*.example' | while read f; do cp "$f" "${f%%.example}"; done && cd ..
}

echo "setting up SSM..."
set_config
source_from_ssm

echo "Setting up parallel databases for RAILS_ENV=${RAILS_ENV}..."

FAIL=0

rm -rf /app/tmp/cache /app/tmp/cache1 /app/tmp/cache2 /app/tmp/cache3
mkdir -p /app/tmp/cache /app/tmp/cache1 /app/tmp/cache2 /app/tmp/cache3

bundle exec rake db:create db:migrate &
TEST_ENV_NUMBER=1 bundle exec rake db:create db:migrate &
TEST_ENV_NUMBER=2 bundle exec rake db:create db:migrate &
TEST_ENV_NUMBER=3 bundle exec rake db:create db:migrate &

for job in `jobs -p`
do
  echo $job
  wait $job || let "FAIL+=1"
done

echo $FAIL

if [ "$FAIL" == "0" ];
then
  exit 0
else
  exit 1
fi
